(defun camelize-loop-helper (first-token c capitalize i s str start)
  (cond ((and first-token (eql #\- c) (not capitalize))
			   (format s (subseq str start (1- i)))
			   i)
			  ((eql #\- c)
			   (format s (string-capitalize (subseq str start (1- i))))
			   i)
			  (t start)))

(defun camelize-end-helper (first-token capitalize start s str i)
	   (if (and first-token (not capitalize))
	       (format s (subseq str start i))
	       (format s (string-capitalize (subseq str start i)))))

(defun camelize (str &optional (capitalize nil))
  (let ((fstr (make-array '(0) :element-type 'base-char :fill-pointer 0 :adjustable t)))
    (with-output-to-string (s fstr)
      (do ((i 0 (1+ i))
	   (c (aref str 0) (aref str i))
	   (first-token t (if (eql #\- c) nil first-token))
	   (start 0 (camelize-loop-helper first-token c capitalize i s str start)))
	  ((= (length str) i)
	   (camelize-end-helper first-token capitalize start s str i)
	   fstr)))))

(defun hyphenate-loop-helper (str i s)
  (let ((p (if (= 0 i) nil (aref str (1- i))))
	(c (aref str i)))
    (cond ((or (and (null p) (upper-case-p c))
	       (and (not (null p)) (upper-case-p c) (upper-case-p p)))
	   (format s "~A" c))
	  ((upper-case-p c)
	   (format s "-~A" c))
	  (t (format s "~A" c)))))

(defun hyphenate (str &optional (case :upper))
  (let ((fstr (make-array '(0) :element-type 'base-char :fill-pointer 0 :adjustable t)))
    (with-output-to-string (s fstr)
      (do ((i 0 (1+ i)))
	  ((= (length str) i)
	   (if (eql case :upper)
	       (string-upcase fstr)
	       (string-downcase fstr)))
	(hyphenate-loop-helper str i s)))))
