(defun camelize (str &optional (capitalize nil))
    (with-output-to-string (s)
      (do* ((start 0 (if end (1+ end) nil))
	    (end (position #\- str) (if start (position #\- str :start start) nil)))
	   ((null start)
	    s)
	(if (or (/= start 0) capitalize)
	    (format s (string-capitalize (subseq str start end)))
	    (format s (subseq str start end))))))

(defun hyphenate-helper (case s str start end)
  (cond ((eql case :upper)
	 (format s (string-upcase (subseq str start end))))
	((eql case :lower)
	 (format s (string-downcase (subseq str start end))))
	(t nil)))

(defun hyphenate (str &optional (case :upper))
  (with-output-to-string (s)
    (do* ((start 0 end)
	  (end (position-if #'upper-case-p str)
	       (if start (position-if #'upper-case-p str :start (1+ start)) nil)))
	 ((null start)
	  s)
      (unless (or (= start 0) (upper-case-p (char str (1- start))))
	(format s "-"))
      (hyphenate-helper case s str start end))))
